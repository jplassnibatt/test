- defaultTab: output
  description: " Every 10 Mins starting at minute 8\n This will pull the daily AIM\
    \ requests for local administrator and record them in the Rundeck database.  Another\
    \ job will use this data to add or remove administrator access and track the history.\
    \ This covers both perm and temp for employees and contractors\n Change Log \n\
    \ 1/9/19 - Change Cron Schedule\n 1/10/19 - Added common modules  \n 1/10/19 -\
    \ test\n 1/14/19 - this is a test\n test\n 1/17/19 - Joey Test\n"
  executionEnabled: true
  group: Local Administrator Automations
  id: 6e829f9f-794e-4c1f-b548-c0071a0e7012
  loglevel: INFO
  name: 1 - Sync AIM Requests To Rundeck History
  nodeFilterEditable: false
  scheduleEnabled: false
  sequence:
    commands:
    - fileExtension: ps1
      interpreterArgsQuoted: false
      script: "# Sync New Requests From AIM into Rundeck\n# Chris Temple 1/25/2019\n\
        \n$strDate = Get-Date\n\n# Import Common Functions\nImport-Module d:\\Rundeck\\\
        scripts\\Rundeck-Common-Functions.psm1\n$env = Environment\nif ($env -match\
        \ 'Production')\n{\n\tWrite-Host 'Running in Production'\n\t$RDDBServer =\
        \ 'SQLRUNDECKTEST' #Change once table is replicated to prod\n\t$RDDBName =\
        \ 'rundeck_test'\n\t$TanDBServer = 'dbsrv287'\n\t$TanDBName = 'taniumconnect_test'\n\
        \t$SCCMDBServer = 'vmsccm04'\n\t$SCCMDBName = 'CM_CCM'\n\t$AIMDBServer = 'sqlempaccess'\n\
        \t$AIMDBName = 'emp_access_dotnet'\n}\nelse\n{\n\tWrite-Host 'Running in Dev'\n\
        \t$RDDBServer = 'SQLRUNDECKTEST'\n\t$RDDBName = 'rundeck_test'\n\t$TanDBServer\
        \ = 'dbsrv287'\n\t$TanDBName = 'taniumconnect_test'\n\t$SCCMDBServer = 'vmsccm04'\n\
        \t$SCCMDBName = 'CM_CCM'\n\t$AIMDBServer = 'sqlempaccess'\n\t$AIMDBName =\
        \ 'emp_access_dotnet'\t\n}\n\n\nWrite-Host \"Starting at $strDate on Environment\
        \ $env\" \n# Only Get AIM Requests Completed In The Last 24 Hours\n$count=0\n\
        $updates=0\n$inserts=0\n# Only get the ones in approved status, not completed\n\
        $sql = @\"\nselect distinct \n\ta.requestid as AIMID, \n\ta.answer as RequestType,\
        \ \n\tb.answer as WorkstationName, \n\tcreateChangeTicket.changeId as CherwellSR,\
        \ \n\thistory.statusdate as DateCompleted,\n\trequests.id as ID\n  FROM [emp_access_dotnet].[dbo].[requests]\
        \ \n  join requested a on a.requestid = requests.requestid -- Join for the\
        \ request type\n  join requestedAppStatus on requestedAppStatus.requestid\
        \ = requests.requestid -- Status of the request\n  left join createChangeTicket\
        \ on createChangeTicket.requestid = requests.requestid -- Cherwell SR #\n\
        \  left join history on requests.requestid = history.requestid\n  join requested\
        \ as b  on a.requestid = b.requestid -- Join for the workstation name\n  where\
        \ a.appid = 379 -- Workstation Local Admin\n  and requestedAppStatus.statusid\
        \ in (2,5) -- Approved or Completed\n  and a.detailid = 3195 -- Temp or Perm\n\
        \  and b.detailid = 3197 -- Workstation Name\n  and UPPER(history.descr) like\
        \ '%APPROVED BY ADDITIONAL%'\n  and DATEDIFF(day, history.statusdate, GETDATE())\
        \ < 3 -- Only need a few days\n  order by AIMID desc -- Get the latest ones\n\
        \"@\n$AIMRequests = @(invoke-sqlcmd -query $sql -database $AIMDBName -serverinstance\
        \ $AIMDBServer) \n\n# Requests can get rejected after approval\n$sql = @\"\
        \nselect distinct \n\ta.requestid as AIMID, \n\ta.answer as RequestType, \n\
        \tb.answer as WorkstationName, \n\tcreateChangeTicket.changeId as CherwellSR,\
        \ \n\thistory.statusdate as DateCompleted,\n\trequests.id as ID\n  FROM [emp_access_dotnet].[dbo].[requests]\
        \ \n  join requested a on a.requestid = requests.requestid -- Join for the\
        \ request type\n  join requestedAppStatus on requestedAppStatus.requestid\
        \ = requests.requestid -- Status of the request\n  left join createChangeTicket\
        \ on createChangeTicket.requestid = requests.requestid -- Cherwell SR #\n\
        \  left join history on requests.requestid = history.requestid\n  join requested\
        \ as b  on a.requestid = b.requestid -- Join for the workstation name\n  where\
        \ a.appid = 379 -- Workstation Local Admin\n  and requestedAppStatus.statusid\
        \ in (4) -- Approved or Completed\n  and a.detailid = 3195 -- Temp or Perm\n\
        \  and b.detailid = 3197 -- Workstation Name\n  and UPPER(history.descr) like\
        \ '%REJECTED%'\n  and DATEDIFF(day, history.statusdate, GETDATE()) < 14 --\
        \ Maybe longer\n  order by AIMID desc -- Get the latest ones\n\"@\n$AIMRequestsRejected\
        \ = @(invoke-sqlcmd -query $sql -database $AIMDBName -serverinstance $AIMDBServer)\
        \ \n# Give me all of the completed AIM requests for the last 7 days. \n# If\
        \ this script stopped running for more than 7 days, it would be a problem\
        \ because we would miss AIM requests.\n\n# Logging Table for Rundeck job\n\
        $sql = \"Select * From dbo.workstation_localadmins\"\n$rdHistory = @(invoke-sqlcmd\
        \ -query $sql -database $RDDBName -serverinstance $RDDBServer) \n# The data\
        \ above is used to track the actions and history we take on each AIM request\n\
        # We use this to make decisions in the script and know when to stop trying\
        \ or add it or even email someone\n\n# SCCM Query to get all local admins\n\
        $sql = @\"\nSELECT COALESCE(n.TopUser, v_r_system.User_Name0) AS [LikelyUser]\n\
        \              ,n.TopUser AS [TopConsoleUser]\n              ,v_r_system.User_Name0\
        \ AS 'MostRecentUser'\n              ,v_r_system.ResourceID\nINTO #WorkstationUsers\n\
        \       FROM v_R_System\n       INNER JOIN v_GS_PC_BIOS\n              ON\
        \ v_GS_PC_BIOS.ResourceID = v_R_System.ResourceID\n       INNER JOIN v_GS_System\n\
        \              ON v_GS_System.ResourceID = v_R_System.ResourceID\n       LEFT\
        \ JOIN (\n              SELECT *\n              FROM (\n                 \
        \    SELECT v_GS_System_Console_usage.ResourceID\n                       \
        \    ,REPLACE(v_GS_System_Console_usage.TopConsoleUser0, 'lgeadint\\', '')\
        \ AS TopUser\n                           ,v_GS_System_Console_usage.TotalSecurityLogTime0\n\
        \                           ,Rank() OVER (\n                             \
        \     PARTITION BY v_GS_System_Console_usage.ResourceID ORDER BY Max(v_GS_System_Console_usage.TotalSecurityLogTime0)\
        \ DESC\n                                  ) AS Rank1\n                   \
        \  FROM v_GS_System_Console_usage\n                     GROUP BY v_GS_System_Console_usage.TotalSecurityLogTime0\n\
        \                           ,v_GS_System_Console_usage.TopConsoleUser0\n \
        \                          ,v_GS_System_Console_usage.ResourceID\n       \
        \              ) tmp\n              WHERE RANK1 = 1\n              ) n\n \
        \             ON n.ResourceID = v_R_System.ResourceID\n       WHERE v_gs_system.SystemRole0\
        \ = 'workstation'\n\nSELECT DISTINCT ad.AgentTime\n       ,v_R_System.Name0\
        \ AS HostName\n       ,v_GS_PC_BIOS.Manufacturer0\n       ,v_GS_PC_BIOS.SerialNumber0\n\
        \       ,v_GS_COMPUTER_SYSTEM.Model0\n       ,v_GS_OPERATING_SYSTEM.InstallDate0\
        \ AS ImageDate\n       ,Last_Logon_Timestamp0\n       ,User_Name0\n      \
        \ ,SystemType0\n       ,v_R_System.Operating_System_Name_and0 AS OS\n    \
        \   ,m.Monitors\n       ,a.[LocalAdmins]\n       ,u.LikelyUser\n       ,u.TopConsoleUser\n\
        \       ,u.MostRecentUser\n       ,v_GS_SYSTEM_ENCLOSURE.ChassisTypes0\n \
        \      ,Convert(VARCHAR, MEM.TotalPhysicalMemory0 / 1024) + ' MB' AS 'PhysicalMemory'\n\
        \       ,LD.DeviceID0 AS 'Disk'\n       ,LD.FreeSpace0\n       ,LD.Size0\n\
        \       ,LD.FreeSpace0 * 100 / LD.Size0 AS 'FreeDiskSpacePercent'\nFROM v_R_System\n\
        JOIN v_GS_PC_BIOS\n       ON v_R_System.ResourceID = v_GS_PC_BIOS.ResourceID\n\
        JOIN v_GS_OPERATING_SYSTEM\n       ON v_GS_OPERATING_SYSTEM.ResourceID = v_R_System.ResourceID\n\
        JOIN v_GS_COMPUTER_SYSTEM\n       ON v_R_System.ResourceID = v_GS_COMPUTER_SYSTEM.ResourceID\n\
        --JOIN v_FullCollectionMembership FCM\n--     ON FCM.ResourceID = v_GS_COMPUTER_SYSTEM.ResourceId\n\
        JOIN v_GS_SYSTEM_ENCLOSURE\n       ON v_GS_SYSTEM_ENCLOSURE.ResourceID = v_GS_COMPUTER_SYSTEM.ResourceID\n\
        JOIN v_AgentDiscoveries AD\n       ON v_GS_COMPUTER_SYSTEM.ResourceID = AD.ResourceId\n\
        LEFT JOIN v_GS_X86_PC_MEMORY MEM\n       ON v_R_System.ResourceID = MEM.ResourceID\n\
        JOIN v_Gs_Logical_Disk AS LD\n       ON v_R_System.ResourceId = LD.ResourceId\n\
        LEFT JOIN (\n       SELECT ddd.MachineID\n              ,Count(*) AS [Monitors]\n\
        \       FROM [CM_CCM].[dbo].[PNP_DEVICE_DRIVER_DATA] ddd\n       INNER JOIN\
        \ v_R_System vr\n              ON vr.ResourceID = ddd.MachineID\n       WHERE\
        \ DeviceID00 LIKE 'DISPLAY%'\n       GROUP BY MachineID\n       ) m\n    \
        \   ON m.MachineID = v_R_System.ResourceID\nINNER JOIN (\n       SELECT vrs.ResourceID\n\
        \              ,STUFF((\n                           SELECT (N',' + ACCT.Account0)\
        \ AS [text()]\n                           FROM V_GS_LocalGroupMembers0 ACCT\n\
        \                           WHERE vrs.ResourceID = ACCT.ResourceID\n     \
        \                             AND ACCT.Name0 = 'Administrators'\n        \
        \                          AND ACCT.category0 <> 'Group'\n               \
        \                   AND (ACCT.account0 like 'E0%' OR \n\t\t\t\t\t\t\t\t  ACCT.account0\
        \ like 'E1%' OR \n\t\t\t\t\t\t\t\t  ACCT.account0 like 'E2%' OR \n\t\t\t\t\
        \t\t\t\t  ACCT.account0 like 'E3%' OR \n\t\t\t\t\t\t\t\t  ACCT.account0 like\
        \ 'N0%' OR \n\t\t\t\t\t\t\t\t  ACCT.account0 like 'N1%' OR \n\t\t\t\t\t\t\t\
        \t  ACCT.account0 like 'N2%' OR \n\t\t\t\t\t\t\t\t  ACCT.account0 like 'N3%'\
        \ \n\t\t\t\t\t\t\t\t  )\n                           FOR XML path(N'')\n  \
        \                         ), 1, 1, N'') AS [LocalAdmins]\n       FROM v_R_System\
        \ vrs\n       ) a\n       ON a.ResourceID = v_R_System.ResourceID\nINNER JOIN\
        \ #WorkstationUsers u\n       ON u.ResourceID = v_R_System.ResourceID\nWHERE\
        \ ad.AgentName = 'Heartbeat Discovery'\n AND LD.DeviceID0 = 'C:'\n  AND v_GS_COMPUTER_SYSTEM.Model0\
        \ NOT LIKE '%vmware%'\n  AND v_GS_COMPUTER_SYSTEM.Model0 NOT LIKE '%x10slv%'\n\
        \  AND v_GS_COMPUTER_SYSTEM.Model0 NOT LIKE '%Virtual Machine%'\n  AND v_R_System.Operating_System_Name_and0\
        \ LIKE '%workstation%'\nORDER BY ad.AgentTime DESC\n\"@\n$SCCMLocalAdmins\
        \ = @(invoke-sqlcmd -query $sql -database $SCCMDBName -serverinstance $SCCMDBServer)\
        \ \n# This data above will bring back all of the computers in SCCM and the\
        \ local administrator group membership on that machine\n\n$hostname = \"\"\
        \n$recExists = $false\n$sccmAdminExist = 'NotExist'\n$accesstype = ''\n$rdAction\
        \ = 'New'\n\n# Work through each AIM request and see if it is new\nforeach\
        \ ($request in $AIMRequests)\n{\n   $aimid = $request.AIMID\n   $empid = $request.ID\n\
        \   $aimCompletedDate = $request.DateCompleted\n   $dateDiff = New-TimeSpan\
        \ -start $aimCompletedDate -End (Get-Date)   \n   $hostname = $request.WorkstationName\n\
        \   $accesstype = $request.RequestType\n   $CherwellSR = $request.CherwellSR\n\
        \   \n\n   foreach ($sccmRec in $SCCMLocalAdmins)\n   {\n        if ($sccmRec.HostName\
        \ -match $hostname)\n        {\n           if ($sccmRec.LocalAdmins -match\
        \ $empid)\n           {\n              $sccmAdminExist = 'Exists'\n\t\t\t\
        \  $rdAction = 'Exists'\n           }\n        }\n   }\n   \n   if ($dateDiff.Days\
        \ -gt 10 -and $accesstype -eq 'Temporary')\n   {\n      $rdAction = 'TempExpired'\n\
        \   }\n   \n   foreach ($history in $rdHistory)\n   {\n      #Write-host $request.AIMID\"\
        =\"$history.AIMID\n      #write-host $hostname\"-\"$accessType \n      if\
        \ ($request.AIMID -eq  $history.AIMID)\n\t  {\n\t     $recExists = $true\n\
        \t  }\n   }\n  if (!$recExists -and $rd.rd_action -notmatch 'Rejected')\n\
        \  {\n      $lasttouch = Get-Date\n      \n\t  $sql = \"INSERT INTO workstation_localadmins\
        \ (AIMID, hostname, userid, rd_action, rd_lasttouch,access_type, aim_completedDate,\
        \ sccm_status, CherwellSR) VALUES ('$aimid', '$hostname', '$empid', '$rdAction','$lasttouch','$accesstype','$aimCompletedDate','$sccmAdminExist','$CherwellSR')\"\
        \n\t  Write-Host \"Adding $AIMID - $hostname - $empid - $accesstype\"\n  \
        \    $recExists = $false\n      $sccmAdminExist = 'NotExist'\n\t  $hostname\
        \ = \"\" # force a new set\n\t  $accesstype = $null\n\t  $rdAction = 'New'\n\
        \      $RDInsert = @(invoke-sqlcmd -query $sql -database $RDDBName -serverinstance\
        \ $RDDBServer)\n  }\n}\n\n\n# Update rejected requests that previously were\
        \ processed\nforeach ($rd in $rdHistory)\n{\n   $aimid = $rd.AIMID\n\n   foreach\
        \ ($rejection in $AIMRequestsRejected)\n   {\n      if ($rejection.AIMID -eq\
        \ $aimid -and $rd.rd_action -notmatch 'Rejected')\n\t  {\n\t     $rdAction\
        \ = 'Rejected'\n\t\t $CherwellSR = $rejection.CherwellSR\n\t\t Write-Host\
        \ \"Rejecting $aimid\"\n\t\t $sql = \"UPDATE workstation_localadmins SET rd_action\
        \ = '$rdAction', CherwellSR = '$CherwellSR' WHERE AIMID = '$aimid'\"\n\t\t\
        \ $RDReject = @(invoke-sqlcmd -query $sql -database $RDDBName -serverinstance\
        \ $RDDBServer)\n\t  }\n   }\n}\n$strDate = Get-Date\nWrite-Host \"Ending at\
        \ $strDate\" "
      scriptInterpreter: powershell.exe -file
    keepgoing: false
    strategy: node-first
  uuid: 6e829f9f-794e-4c1f-b548-c0071a0e7012

